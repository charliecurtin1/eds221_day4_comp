---
title: "EDS 221 Day 4 Comp"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

## Functions

#### make a function that doubles a value

```{r}
double_value <- function(my_dollars) {
  print(2 * my_dollars)
}

double_value(9)

# accomplishes the same thing, don't need the print statement
double_value2 <- function(dollars) {
  dollars * 2
}

double_value2(dollars = 20)
```

```{r}
# can input a vector into a function 
monthly_income <- c(42.50, 48, 42)

double_value(monthly_income)
```

### create a function that returns an awesome restaurant name

```{r}
name_restaurant <- function(animal, food) {
  print(paste0(animal, food))
}

name_restaurant("Dog", "Beans")
```

#### given temp in Fahrenheit, write a function that converts it to celsius

```{r}
f_to_c <- function(temp_f) {
  print((5 / 9) * (temp_f - 32))
}

f_to_c(temp_f = 32)
```

### create a function that given inputs of age and hometown, returns "I am this years old, and I'm from this town"

```{r}
age_and_town <- function(age, town) {
  print(paste0("I am ", age, " years old, and I am from ", town, "."))
}

age_and_town(age = 23, town = "Los Angeles")
```

```{r}
double_value2 <- function(dollars) {
  dollars * 2
}

double_value2(dollars = 20)
```

## Functions with conditionals

```{r}
calculate_animal_age <- function(species, age_human_yrs) {
  if (species == "dog") {
    age_human_yrs * 7
  } else if (species == "goat") {
    age_human_yrs * 4.7
  } else {
    print("no can do")
  }
}

calculate_animal_age(species = "whale", age_human_yrs = 4)
```

#### write a function that given temperature in Kelvin, if a user selects "metric", then return Celsius. If they select "English", then return degrees in Fahrenheit

```{r}
convert_Kelvin <- function(system, temp) {
  if (system == "metric") {
    temp - 273.15
  } else if (system == "English") {
    ((temp - 273.15) * 1.8) +32
  } else {
    print("scale not recognized")
  }
}

convert_Kelvin(system = "idk", temp = 90)
```

# More functions

##### Creating a subset within a function, and then return something based on that subset

```{r}
dog_choice <- data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tallie"),
                         food = c("everything", "salmon", "pancakes", "chicken", "enchiladas"))

dog_choice
```

```{r}
dog_menu <- function(enter_dog_name) {
  dog_sub <- filter(dog_choice, dog_name == enter_dog_name)
  print(paste("My name is", dog_sub$dog_name, "and my favorite food is", dog_sub$food))
}

dog_menu("Banjo")
```

A function with a for loop

```{r}
df_means <- function(df) {
  for (i in seq_along(df)) {
    col_mean <- round(mean(df[[i]], na.rm = TRUE), 2)
    column_name <- colnames(df[i])
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}

df_means(df = mtcars)

df_means(df = faithful)
```
